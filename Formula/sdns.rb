# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Sdns < Formula
  desc "Privacy important, fast, recursive dns resolver server with dnssec support"
  homepage "https://sdns.dev"
  version "1.3.3"

  depends_on "go" => :build

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/semihalev/sdns/releases/download/v1.3.3/sdns-1.3.3_darwin_arm64.tar.gz"
      sha256 "23ac4eb8fe5213ec149b4ef1030266c7f854d437f3c937d4d188aedd556a0d21"

      def install
        bin.install "sdns"
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/semihalev/sdns/releases/download/v1.3.3/sdns-1.3.3_darwin_amd64.tar.gz"
      sha256 "e0588f12a9ab1c8ab8f482509aa564159062abfbcba52e1b52ca8fe33fc6ae21"

      def install
        bin.install "sdns"
      end
    end
  end

  on_linux do
    if Hardware::CPU.arm? && !Hardware::CPU.is_64_bit?
      url "https://github.com/semihalev/sdns/releases/download/v1.3.3/sdns-1.3.3_linux_armv6.tar.gz"
      sha256 "59502119cbd25a737b0540967636d27cbccee5131d30af965fc81a9f912d4d42"

      def install
        bin.install "sdns"
      end
    end
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/semihalev/sdns/releases/download/v1.3.3/sdns-1.3.3_linux_arm64.tar.gz"
      sha256 "40daf13e649070225f77f42c2f12e0a0192459d24deee084bc30e012817b59d5"

      def install
        bin.install "sdns"
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/semihalev/sdns/releases/download/v1.3.3/sdns-1.3.3_linux_amd64.tar.gz"
      sha256 "0611b61aee7819d101c69d900b4ccc67285ccab5c347f0242731d855c6863881"

      def install
        bin.install "sdns"
      end
    end
  end

  service do
    run [opt_bin/"sdns", "-config", etc/"sdns.conf"]
    keep_alive true
    require_root true
    error_log_path var/"log/sdns.log"
    log_path var/"log/sdns.log"
    working_dir opt_prefix
  end

  test do
    fork do
      exec bin/"sdns", "-config", testpath/"sdns.conf"
    end
    sleep(2)
    assert_predicate testpath/"sdns.conf", :exist?
  end
end
